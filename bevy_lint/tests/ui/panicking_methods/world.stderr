error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:23:11
   |
23 |     world.entity(bob);
   |           ^^^^^^^^^^^
   |
   = help: use `world.get_entity(bob)` and handle the `Option` or `Result`
note: the lint level is defined here
  --> tests/ui/panicking_methods/world.rs:5:9
   |
5  | #![deny(bevy::panicking_methods)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:27:5
   |
27 |     World::entity(&world, bob);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_entity(&world, bob)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:31:11
   |
31 |     world.entity_mut(bob);
   |           ^^^^^^^^^^^^^^^
   |
   = help: use `world.get_entity_mut(bob)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:35:5
   |
35 |     World::entity_mut(&mut world, bob);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_entity_mut(&mut world, bob)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:39:11
   |
39 |     world.resource::<Jeffrey>();
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_resource::<Jeffrey>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:43:5
   |
43 |     World::resource::<Jeffrey>(&world);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_resource::<Jeffrey>(&world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:47:11
   |
47 |     world.resource_mut::<Jeffrey>();
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_resource_mut::<Jeffrey>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:51:5
   |
51 |     World::resource_mut::<Jeffrey>(&mut world);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_resource_mut::<Jeffrey>(&mut world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:55:11
   |
55 |     world.resource_ref::<Jeffrey>();
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_resource_ref::<Jeffrey>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:59:5
   |
59 |     World::resource_ref::<Jeffrey>(&world);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_resource_ref::<Jeffrey>(&world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:63:11
   |
63 |     world.non_send_resource::<Patrick>();
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_non_send_resource::<Patrick>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:67:5
   |
67 |     World::non_send_resource::<Patrick>(&world);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_non_send_resource::<Patrick>(&world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:71:11
   |
71 |     world.non_send_resource_mut::<Patrick>();
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_non_send_resource_mut::<Patrick>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:75:5
   |
75 |     World::non_send_resource_mut::<Patrick>(&mut world);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_non_send_resource_mut::<Patrick>(&mut world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:79:11
   |
79 |     world.run_schedule(Update);
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.try_run_schedule(Update)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:83:5
   |
83 |     World::run_schedule(&mut world, Update);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::try_run_schedule(&mut world, Update)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:87:11
   |
87 |     world.schedule_scope(Update, |_world, _schedule| {});
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.try_schedule_scope(Update, |_world, _schedule| {})` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:91:5
   |
91 |     World::schedule_scope(&mut world, Update, |_world, _schedule| {});
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::try_schedule_scope(&mut world, Update, |_world, _schedule| {})` and handle the `Option` or `Result`

error: aborting due to 18 previous errors

