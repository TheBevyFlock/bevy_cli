error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:42:11
   |
42 |     world.entity(bob);
   |           ^^^^^^^^^^^
   |
   = help: use `world.get_entity(bob)` and handle the `Option` or `Result`
note: the lint level is defined here
  --> tests/ui/panicking_methods/world.rs:6:9
   |
5  | #![deny(bevy::panicking_methods)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:46:5
   |
46 |     World::entity(&world, bob);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_entity(&world, bob)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:50:11
   |
50 |     world.entity_mut(bob);
   |           ^^^^^^^^^^^^^^^
   |
   = help: use `world.get_entity_mut(bob)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:54:5
   |
54 |     World::entity_mut(&mut world, bob);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_entity_mut(&mut world, bob)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:62:11
   |
62 |     world.many_entities([bob]);
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_many_entities([bob])` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:70:5
   |
70 |     World::many_entities(&mut world, [bob]);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_many_entities(&mut world, [bob])` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:78:11
   |
78 |     world.many_entities_mut([bob]);
   |           ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_many_entities_mut([bob])` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:86:5
   |
86 |     World::many_entities_mut(&mut world, [bob]);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_many_entities_mut(&mut world, [bob])` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:90:11
   |
90 |     world.resource::<Jeffrey>();
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_resource::<Jeffrey>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:94:5
   |
94 |     World::resource::<Jeffrey>(&world);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `World::get_resource::<Jeffrey>(&world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/world.rs:98:11
   |
98 |     world.resource_mut::<Jeffrey>();
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `world.get_resource_mut::<Jeffrey>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:102:5
    |
102 |     World::resource_mut::<Jeffrey>(&mut world);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `World::get_resource_mut::<Jeffrey>(&mut world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:106:11
    |
106 |     world.resource_ref::<Jeffrey>();
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `world.get_resource_ref::<Jeffrey>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:110:5
    |
110 |     World::resource_ref::<Jeffrey>(&world);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `World::get_resource_ref::<Jeffrey>(&world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:114:11
    |
114 |     world.non_send_resource::<Patrick>();
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `world.get_non_send_resource::<Patrick>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:118:5
    |
118 |     World::non_send_resource::<Patrick>(&world);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `World::get_non_send_resource::<Patrick>(&world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:122:11
    |
122 |     world.non_send_resource_mut::<Patrick>();
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `world.get_non_send_resource_mut::<Patrick>()` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:126:5
    |
126 |     World::non_send_resource_mut::<Patrick>(&mut world);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `World::get_non_send_resource_mut::<Patrick>(&mut world)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:130:11
    |
130 |     world.run_schedule(Update);
    |           ^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `world.try_run_schedule(Update)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:134:5
    |
134 |     World::run_schedule(&mut world, Update);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `World::try_run_schedule(&mut world, Update)` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:138:11
    |
138 |     world.schedule_scope(Update, |_world, _schedule| {});
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `world.try_schedule_scope(Update, |_world, _schedule| {})` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:142:5
    |
142 |     World::schedule_scope(&mut world, Update, |_world, _schedule| {});
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `World::try_schedule_scope(&mut world, Update, |_world, _schedule| {})` and handle the `Option` or `Result`

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:27:15
    |
27  |         world.entity(bob);
    |               ^^^^^^^^^^^
...
150 |     local_macro!();
    |     -------------- in this macro invocation
    |
    = help: use `world.get_entity(bob)` and handle the `Option` or `Result`
    = note: this error originates in the macro `local_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: called a `World` method that can panic when a non-panicking alternative exists
   --> tests/ui/panicking_methods/world.rs:31:9
    |
31  |         World::entity(&world, bob);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
150 |     local_macro!();
    |     -------------- in this macro invocation
    |
    = help: use `World::get_entity(&world, bob)` and handle the `Option` or `Result`
    = note: this error originates in the macro `local_macro` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 24 previous errors

