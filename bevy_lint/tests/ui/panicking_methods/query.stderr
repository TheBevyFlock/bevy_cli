error: called a `Query` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/query.rs:21:27
   |
21 |     let [_, _, _] = query.many(entities);
   |                           ^^^^^^^^^^^^^^
   |
   = help: use `query.get_many(entities)` and handle the `Option` or `Result`
note: the lint level is defined here
  --> tests/ui/panicking_methods/query.rs:4:9
   |
4  | #![deny(bevy::panicking_methods)]
   |         ^^^^^^^^^^^^^^^^^^^^^^^

error: called a `Query` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/query.rs:29:21
   |
29 |     let [_, _, _] = Query::many(&query, entities);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `Query::get_many(&query, entities)` and handle the `Option` or `Result`

error: called a `Query` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/query.rs:37:11
   |
37 |     query.many_mut([]);
   |           ^^^^^^^^^^^^
   |
   = help: use `query.get_many_mut([])` and handle the `Option` or `Result`

error: called a `Query` method that can panic when a non-panicking alternative exists
  --> tests/ui/panicking_methods/query.rs:45:5
   |
45 |     Query::many_mut(&mut query, []);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: use `Query::get_many_mut(&mut query, [])` and handle the `Option` or `Result`

error: aborting due to 4 previous errors

